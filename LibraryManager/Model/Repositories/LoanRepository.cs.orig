using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using LibraryManager.Model.Entities;
using Microsoft.EntityFrameworkCore;

namespace LibraryManager.Model.Repositories
{
    internal class LoanRepository : Interfaces.ILoanRepository
    {
        private readonly LibraryContext _context;
        public LoanRepository(LibraryContext context)
        {
           _context = context; 
        }
       public async Task DeleteAsync(Loan loan)
        {
            var loanToDelete = await _context.Loans.FindAsync(loan.Id);
            if (loanToDelete != null)
            {
                _context.Loans.Remove(loanToDelete);
                await SaveAsync();
            }
        }

        public async Task<IEnumerable<Loan>> GetAllAsync()
        {
            return await _context.Loans.ToListAsync();
        }

        public async Task<Loan?> GetByIdAsync(int id)
        {
            return await _context.Loans.FindAsync(id);
        }

        public async Task InsertAsync(Loan loan)
        {
            await _context.Loans.AddAsync(loan);
            await SaveAsync();
        }

        public async Task SaveAsync()
        {
            await _context.SaveChangesAsync();
        }

        public async Task UpdateAsync(Loan loan)
        {
            var loanToUpdate = await _context.Loans.FindAsync(loan.Id);
            if (loanToUpdate != null)
            {
                loanToUpdate.TakeDate = loan.TakeDate;
                loanToUpdate.ReturnDate = loan.ReturnDate;
                loanToUpdate.BookId = loan.BookId;
                loanToUpdate.UserId = loan.UserId;
<<<<<<< HEAD
		await SaveAsync();
=======
                await SaveAsync();
>>>>>>> CRUD-Repositories-Book-User-Loan
            }
        }
    }
}
